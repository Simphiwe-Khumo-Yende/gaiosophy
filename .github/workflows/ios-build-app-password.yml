name: Build iOS with App-Specific Password

on:
  workflow_dispatch: # Manual trigger only

env:
  FLUTTER_VERSION: '3.32.0'

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run tests
      run: flutter test
      continue-on-error: true
      
    - name: Check for app-specific password authentication
      run: |
        if [ -z "${{ secrets.APPLE_ID }}" ]; then
          echo "❌ APPLE_ID secret missing"
        else
          echo "✅ APPLE_ID present"
        fi
        
        if [ -z "${{ secrets.APP_SPECIFIC_PASSWORD }}" ]; then
          echo "❌ APP_SPECIFIC_PASSWORD secret missing"
        else
          echo "✅ APP_SPECIFIC_PASSWORD present"
        fi
        
    - name: Import certificates
      if: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
        p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        
    - name: Build iOS app (no codesign)
      run: |
        flutter build ios --release --no-codesign
        echo "✅ Flutter build completed successfully"
        
    - name: Archive iOS app (if certificates available)
      if: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
      run: |
        xcodebuild -workspace ios/Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath build/Runner.xcarchive \
          -allowProvisioningUpdates \
          CODE_SIGN_STYLE=Automatic \
          DEVELOPMENT_TEAM=Z9WJ3V7JV3 \
          archive
          
    - name: Export IPA (if certificates available)
      if: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
      run: |
        xcodebuild -exportArchive \
          -archivePath build/Runner.xcarchive \
          -exportPath build \
          -exportOptionsPlist ios/ExportOptions.plist \
          -allowProvisioningUpdates
          
    - name: Upload to TestFlight using app-specific password
      if: ${{ secrets.APPLE_ID && secrets.APP_SPECIFIC_PASSWORD && secrets.IOS_DISTRIBUTION_CERTIFICATE }}
      run: |
        echo "Uploading to TestFlight using app-specific password..."
        xcrun altool --upload-app \
          --type ios \
          --file build/Runner.ipa \
          --username "${{ secrets.APPLE_ID }}" \
          --password "${{ secrets.APP_SPECIFIC_PASSWORD }}" \
          --verbose
          
    - name: Upload build artifacts (always create IPA artifact)
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-$(date +%Y%m%d-%H%M%S)
        path: |
          build/Runner.ipa
          build/Runner.xcarchive
        if-no-files-found: warn
        
    - name: Build summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Flutter build completed successfully" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "build/Runner.ipa" ]; then
          echo "- ✅ IPA file generated successfully" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Available as GitHub artifact for download" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ secrets.APPLE_ID }}" ] && [ -n "${{ secrets.APP_SPECIFIC_PASSWORD }}" ]; then
            echo "- ✅ Attempted TestFlight upload with app-specific password" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ Manual TestFlight upload needed (download artifact)" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- ⚠️ IPA generation failed - need signing certificates" >> $GITHUB_STEP_SUMMARY
          echo "- ℹ️ Add IOS_DISTRIBUTION_CERTIFICATE and IOS_CERTIFICATE_PASSWORD secrets" >> $GITHUB_STEP_SUMMARY
        fi
