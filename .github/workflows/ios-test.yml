name: iOS Build Test (Step by Step)

on:
  workflow_dispatch: # Manual trigger only for testing
    inputs:
      test_phase:
        description: 'Which phase to test'
        required: true
        default: 'all'
        type: choice
        options:
        - 'dependencies'
        - 'build'
        - 'archive'
        - 'all'

env:
  FLUTTER_VERSION: '3.32.0'

jobs:
  test-ios-build:
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: üîç Phase 1 - Validate Project Structure
      run: |
        echo "=== VALIDATING PROJECT STRUCTURE ==="
        echo "‚úÖ Checking critical iOS files..."
        
        # Check essential files exist
        [ -f "ios/Runner.xcworkspace/contents.xcworkspacedata" ] && echo "‚úÖ Xcode workspace exists" || echo "‚ùå Xcode workspace MISSING"
        [ -f "ios/Runner.xcodeproj/project.pbxproj" ] && echo "‚úÖ Xcode project exists" || echo "‚ùå Xcode project MISSING"
        [ -f "ios/Runner/Info.plist" ] && echo "‚úÖ Info.plist exists" || echo "‚ùå Info.plist MISSING"
        [ -f "ios/ExportOptions.plist" ] && echo "‚úÖ ExportOptions.plist exists" || echo "‚ùå ExportOptions.plist MISSING"
        
        # Check DEVELOPMENT_TEAM in project
        if grep -q "DEVELOPMENT_TEAM = Z9WJ3V7JV3" ios/Runner.xcodeproj/project.pbxproj; then
          TEAM_COUNT=$(grep -c "DEVELOPMENT_TEAM = Z9WJ3V7JV3" ios/Runner.xcodeproj/project.pbxproj)
          echo "‚úÖ DEVELOPMENT_TEAM configured ($TEAM_COUNT instances)"
        else
          echo "‚ùå DEVELOPMENT_TEAM MISSING"
          exit 1
        fi
        
        echo "‚úÖ Phase 1 Complete: Project structure validated"

    - name: üîç Phase 2 - Test Dependencies
      if: github.event.inputs.test_phase == 'dependencies' || github.event.inputs.test_phase == 'all'
      run: |
        echo "=== TESTING DEPENDENCIES ==="
        
        # Test Flutter dependencies
        echo "üì¶ Running flutter pub get..."
        flutter pub get
        
        # Ensure Flutter iOS frameworks are available
        echo "üîß Ensuring Flutter iOS frameworks..."
        flutter precache --ios
        
        # Test CocoaPods with proper Flutter setup
        echo "üç´ Testing CocoaPods installation..."
        cd ios
        
        # Clean previous pods
        rm -rf Pods/
        rm -f Podfile.lock
        
        # Ensure Flutter generates proper configuration
        cd ..
        flutter clean
        flutter pub get
        cd ios
        
        # Install pods with verbose output
        pod install --verbose
        
        # Verify Flutter framework is properly linked
        echo "üîç Verifying Flutter framework integration..."
        if [ -d "Pods/Target Support Files/Pods-Runner" ]; then
          echo "‚úÖ CocoaPods target support files created"
          find Pods/Target\ Support\ Files/Pods-Runner -name "*.xcconfig" | head -3
          
          # Check if we need to update xcconfig files
          if [ -f "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig" ]; then
            echo "üîß Ensuring Flutter xcconfig includes CocoaPods..."
            
            # Add CocoaPods includes to Flutter xcconfig if not present
            if ! grep -q "Pods-Runner" ../Flutter/Debug.xcconfig; then
              echo '#include "../Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"' >> ../Flutter/Debug.xcconfig
              echo "‚úÖ Added CocoaPods debug config to Flutter Debug.xcconfig"
            fi
            
            if ! grep -q "Pods-Runner" ../Flutter/Release.xcconfig; then
              echo '#include "../Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"' >> ../Flutter/Release.xcconfig
              echo "‚úÖ Added CocoaPods release config to Flutter Release.xcconfig"
            fi
          fi
        else
          echo "‚ùå CocoaPods target support files missing"
          exit 1
        fi
        
        # Check for Flutter framework in pods
        if find Pods -name "*Flutter*" -type d | grep -q Flutter; then
          echo "‚úÖ Flutter framework found in Pods"
          find Pods -name "*Flutter*" -type d | head -3
        else
          echo "‚ùå Flutter framework not found in Pods"
          exit 1
        fi
        
        cd ..
        echo "‚úÖ Phase 2 Complete: Dependencies resolved"

    - name: üîç Phase 3 - Test Flutter Build
      if: github.event.inputs.test_phase == 'build' || github.event.inputs.test_phase == 'all'
      run: |
        echo "=== TESTING FLUTTER BUILD ==="
        
        # Ensure clean environment
        flutter clean
        flutter pub get
        
        # Ensure Flutter iOS precache
        flutter precache --ios
        
        # Ensure CocoaPods are fresh
        cd ios
        rm -rf Pods/
        rm -f Podfile.lock
        pod install
        cd ..
        
        # Check Flutter framework availability before build
        echo "üîç Checking Flutter framework availability..."
        if [ -d "$FLUTTER_ROOT/bin/cache/artifacts/engine/ios" ]; then
          echo "‚úÖ Flutter iOS engine artifacts available"
          ls -la "$FLUTTER_ROOT/bin/cache/artifacts/engine/ios/" | head -5
        else
          echo "‚ö†Ô∏è Flutter iOS engine artifacts not found, forcing download..."
          flutter precache --ios --force
        fi
        
        # Test Flutter iOS build (no codesigning)
        echo "üèóÔ∏è Building iOS app without codesigning..."
        flutter build ios --release --no-codesign --verbose
        
        # Verify build outputs
        echo "üîç Verifying build outputs..."
        if [ -d "build/ios/iphoneos/Runner.app" ]; then
          echo "‚úÖ Runner.app created successfully"
          ls -la build/ios/iphoneos/Runner.app
        else
          echo "‚ùå Runner.app not found"
          exit 1
        fi
        
        echo "‚úÖ Phase 3 Complete: Flutter build successful"

    - name: üîç Phase 4 - Test Code Signing Setup
      if: github.event.inputs.test_phase == 'archive' || github.event.inputs.test_phase == 'all'
      run: |
        echo "=== TESTING CODE SIGNING SETUP ==="
        
        # Check if secrets are available (without exposing them)
        if [ -z "${{ secrets.APPSTORE_ISSUER_ID }}" ]; then
          echo "‚ùå APPSTORE_ISSUER_ID secret missing"
          exit 1
        else
          echo "‚úÖ APPSTORE_ISSUER_ID secret configured"
        fi
        
        if [ -z "${{ secrets.APPSTORE_KEY_ID }}" ]; then
          echo "‚ùå APPSTORE_KEY_ID secret missing"
          exit 1
        else
          echo "‚úÖ APPSTORE_KEY_ID secret configured"
        fi
        
        if [ -z "${{ secrets.APPSTORE_PRIVATE_KEY }}" ]; then
          echo "‚ùå APPSTORE_PRIVATE_KEY secret missing"
          exit 1
        else
          echo "‚úÖ APPSTORE_PRIVATE_KEY secret configured"
        fi
        
        # Setup keychain
        security create-keychain -p "temp123" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "temp123" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Create API key file
        mkdir -p ~/.appstoreconnect/private_keys/
        echo '${{ secrets.APPSTORE_PRIVATE_KEY }}' > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8
        chmod 600 ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8
        
        # Test API connection
        echo "üîê Testing App Store Connect API..."
        xcrun altool --list-apps \
          --apiKey ${{ secrets.APPSTORE_KEY_ID }} \
          --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }} \
          --verbose
        
        echo "‚úÖ Phase 4 Complete: API connection successful"

    - name: üîç Phase 5 - Test Archive Creation
      if: github.event.inputs.test_phase == 'archive' || github.event.inputs.test_phase == 'all'
      run: |
        echo "=== TESTING ARCHIVE CREATION ==="
        
        # Test xcodebuild archive
        echo "üì¶ Creating Xcode archive..."
        xcodebuild -workspace ios/Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath build/Runner.xcarchive \
          -allowProvisioningUpdates \
          CODE_SIGN_STYLE=Automatic \
          DEVELOPMENT_TEAM=Z9WJ3V7JV3 \
          archive
        
        # Check if archive was created
        if [ -d "build/Runner.xcarchive" ]; then
          echo "‚úÖ Archive created successfully"
          ls -la build/Runner.xcarchive
        else
          echo "‚ùå Archive creation failed"
          exit 1
        fi
        
        echo "‚úÖ Phase 5 Complete: Archive creation successful"

    - name: üéØ Test Summary
      if: always()
      run: |
        echo "=== TEST SUMMARY ==="
        echo "Test phase: ${{ github.event.inputs.test_phase }}"
        echo "Runner: macOS-latest"
        echo "Flutter: ${{ env.FLUTTER_VERSION }}"
        echo "Xcode: $(xcodebuild -version | head -1)"
        echo "============================="
        
        if [ "$?" -eq 0 ]; then
          echo "üéâ ALL TESTS PASSED!"
          echo "Ready for full deployment workflow"
        else
          echo "‚ùå Tests failed - check logs above"
        fi

    - name: Upload build artifacts (if created)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-test-artifacts
        path: |
          build/Runner.xcarchive
          build/ios/iphoneos/Runner.app
        if-no-files-found: ignore

    - name: Clean up
      if: always()
      run: |
        rm -f ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8
        security delete-keychain build.keychain || true
