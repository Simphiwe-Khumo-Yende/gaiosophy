name: Build and Deploy to TestFlight

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  FLUTTER_VERSION: '3.32.0'

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run tests
      run: flutter test
      continue-on-error: true # Continue even if tests fail
      
    - name: Check for required secrets
      run: |
        if [ -z "${{ secrets.APPSTORE_ISSUER_ID }}" ]; then
          echo "Missing APPSTORE_ISSUER_ID secret"
          exit 1
        fi
        if [ -z "${{ secrets.APPSTORE_KEY_ID }}" ]; then
          echo "Missing APPSTORE_KEY_ID secret"
          exit 1
        fi
        if [ -z "${{ secrets.APPSTORE_PRIVATE_KEY }}" ]; then
          echo "Missing APPSTORE_PRIVATE_KEY secret"
          exit 1
        fi
        echo "✅ App Store Connect API secrets are configured"
        
    - name: Import certificates (if available)
      if: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE != '' }}
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
        p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        
    - name: Import provisioning profile
      uses: apple-actions/download-provisioning-profiles@v1
      with:
        bundle-id: com.gaiosophy.app
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        
    - name: Build iOS app
      run: |
        flutter build ios --release --no-codesign
        
    - name: Build and archive with Xcode (if certificates available)
      if: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE != '' }}
      run: |
        xcodebuild -workspace ios/Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath build/Runner.xcarchive \
          archive
          
    - name: Export IPA (if certificates available)
      if: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE != '' }}
      run: |
        xcodebuild -exportArchive \
          -archivePath build/Runner.xcarchive \
          -exportPath build \
          -exportOptionsPlist ios/ExportOptions.plist
          
    - name: Upload to TestFlight (if IPA exists)
      if: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE != '' }}
      uses: apple-actions/upload-testflight-build@v1
      with:
        app-path: build/Runner.ipa
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        
    - name: Upload build artifacts
      if: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: build/Runner.ipa
        
    - name: Build summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Flutter build completed" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}" ]; then
          echo "- ✅ Code signing configured" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ IPA generated and uploaded to TestFlight" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ Code signing not configured (add IOS_DISTRIBUTION_CERTIFICATE secret)" >> $GITHUB_STEP_SUMMARY
          echo "- ℹ️ Build completed but cannot upload to TestFlight without certificates" >> $GITHUB_STEP_SUMMARY
        fi
