name: Build and Deploy to TestFlight (Definitive Version)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.32.0'

jobs:
  build-and-deploy-ios:
    runs-on: macos-15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Select stable Xcode version (16.2)
      run: sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer

    - name: Ensure iOS 18.2 runtime
      run: |
        sudo xcodebuild -downloadPlatform iOS
        xcrun simctl list runtimes

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get App Version from pubspec.yaml
      id: get_version
      run: |
        version_line=$(grep 'version:' pubspec.yaml | xargs)
        full_version=${version_line#*version: }
        version_name=${full_version%+*}
        build_number=${full_version#*+}
        echo "version_name=${version_name}" >> $GITHUB_OUTPUT
        echo "build_number=${build_number}" >> $GITHUB_OUTPUT

    # --- Secure Configuration & Authentication ---
    - name: Decode GoogleService-Info.plist
      run: echo "${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}" | base64 --decode > "${{ github.workspace }}/ios/Runner/GoogleService-Info.plist"

    - name: Create App Store Connect API Key file
      run: |
        mkdir -p ~/.appstoreconnect/private_keys/
        echo '${{ secrets.APPSTORE_PRIVATE_KEY }}' > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8

    - name: Verify App Store Connect API Authentication
      run: |
        echo "--- VERIFYING SECRETS ---"
        echo "Using Key ID: ${{ secrets.APPSTORE_KEY_ID }}"
        echo "Using Issuer ID: ${{ secrets.APPSTORE_ISSUER_ID }}"
        echo "--------------------------"
        echo "Attempting to authenticate with App Store Connect..."
        # Use a command that directly tests the API key, key ID, and issuer ID.
        xcrun altool --list-apps --apiKey ${{ secrets.APPSTORE_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }} --verbose
        echo "âœ… App Store Connect API key is valid and has permissions."

    # --- Build Preparation ---
    - name: Clean and Get Dependencies
      run: |
        flutter clean
        flutter pub get

    - name: Setup iOS Signing
      run: |
        # Create custom keychain
        security create-keychain -p "github_actions_keychain" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "github_actions_keychain" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Decode certificate
        echo "${{ secrets.IOS_DIST_CERT_P12 }}" | base64 --decode > ios_dist.p12
        
        # Import certificate with explicit app access
        security import ios_dist.p12 -k build.keychain \
          -P "${{ secrets.IOS_DIST_CERT_PASSWORD }}" \
          -T /usr/bin/codesign \
          -T /usr/bin/security
        
        # CRITICAL: Set partition list to allow codesign without prompt
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "github_actions_keychain" build.keychain
        
        # Verify certificate was imported
        echo "Installed certificates:"
        security find-identity -v -p codesigning build.keychain
        
        # Setup provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/gaiosophy.mobileprovision

        PROFILE_PLIST=$(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/gaiosophy.mobileprovision)
        PROFILE_UUID=$(echo "$PROFILE_PLIST" | plutil -extract UUID xml1 -o - - | xmllint --xpath "//string/text()" -)
        PROFILE_NAME=$(echo "$PROFILE_PLIST" | plutil -extract Name xml1 -o - - | xmllint --xpath "//string/text()" -)
        echo "Profile UUID: ${PROFILE_UUID}"
        echo "Profile Name: ${PROFILE_NAME}"
        echo "PROFILE_UUID=${PROFILE_UUID}" >> $GITHUB_ENV
        echo "PROFILE_NAME=${PROFILE_NAME}" >> $GITHUB_ENV

    - name: Create ExportOptions.plist
      run: |
        cat > ios/ExportOptions.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>uploadSymbols</key>
            <true/>
            <key>signingStyle</key>
            <string>manual</string>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>com.gaiosophy.app</key>
                <string>${PROFILE_NAME}</string>
            </dict>
        </dict>
        </plist>
        EOF

    # --- Build and Upload ---
    - name: Ensure CocoaPods (Homebrew)
      run: |
        sudo gem uninstall cocoapods -a -x || true
        brew install cocoapods || brew upgrade cocoapods
        COCOAPODS_VERSION=$(pod --version)
        echo "CocoaPods version: ${COCOAPODS_VERSION}"
        REQUIRED_VERSION=1.12.0
        if [ "$(printf '%s\n' "${COCOAPODS_VERSION}" "${REQUIRED_VERSION}" | sort -V | tail -n1)" != "${COCOAPODS_VERSION}" ]; then
          echo "ERROR: CocoaPods must be version ${REQUIRED_VERSION} or higher"
          exit 1
        fi

    - name: Install CocoaPods Dependencies
      run: |
        cd ios
        rm -rf Pods Podfile.lock
        pod repo update
        pod install --repo-update
        cd ..
    
    - name: Build and Sign IPA
      env:
        FLUTTER_XCODE_CODE_SIGN_STYLE: Manual
        FLUTTER_XCODE_DEVELOPMENT_TEAM: ${{ secrets.APPLE_TEAM_ID }}
        FLUTTER_XCODE_PROVISIONING_PROFILE_SPECIFIER: ${{ env.PROFILE_NAME }}
      run: |
        echo "=== Build Configuration ==="
        echo "Code Sign Style: Manual"
        echo "Development Team: ${{ secrets.APPLE_TEAM_ID }}"
        echo "Provisioning Profile: ${PROFILE_NAME}"
        echo "=========================="
        
        flutter build ipa --release \
          --build-name=${{ steps.get_version.outputs.version_name }} \
          --build-number=${{ steps.get_version.outputs.build_number }} \
          --export-options-plist=ios/ExportOptions.plist

    - name: List IPA Files
      run: |
        echo "=== Contents of build/ios/ipa/ ==="
        ls -lah build/ios/ipa/
        echo "===================================="
    
    - name: Upload to TestFlight
      run: |
        # Find the IPA file dynamically
        IPA_PATH=$(find build/ios/ipa -name "*.ipa" -type f | head -n 1)
        
        if [ -z "$IPA_PATH" ]; then
          echo "ERROR: No IPA file found in build/ios/ipa/"
          exit 1
        fi
        
        echo "Found IPA at: $IPA_PATH"
        IPA_SIZE=$(ls -lh "$IPA_PATH" | awk '{print $5}')
        echo "IPA Size: $IPA_SIZE"
        
        echo "Uploading to TestFlight..."
        xcrun altool --upload-app \
          --type ios \
          --file "$IPA_PATH" \
          --apiKey ${{ secrets.APPSTORE_KEY_ID }} \
          --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }} \
          --verbose
          
    - name: Clean up keychain and API key
      if: always()
      run: |
        security delete-keychain build.keychain || true
        rm -f ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8
        rm -f ios_dist.p12
        rm -f ~/Library/MobileDevice/Provisioning\ Profiles/gaiosophy.mobileprovision