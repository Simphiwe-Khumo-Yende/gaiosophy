name: Build and Deploy to TestFlight (No Local Mac Required)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  FLUTTER_VERSION: '3.32.0'

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run tests
      run: flutter test
      continue-on-error: true
      
    - name: Check for required secrets
      run: |
        if [ -z "${{ secrets.APPSTORE_ISSUER_ID }}" ]; then
          echo "Missing APPSTORE_ISSUER_ID secret"
          exit 1
        fi
        if [ -z "${{ secrets.APPSTORE_KEY_ID }}" ]; then
          echo "Missing APPSTORE_KEY_ID secret"
          exit 1
        fi
        if [ -z "${{ secrets.APPSTORE_PRIVATE_KEY }}" ]; then
          echo "Missing APPSTORE_PRIVATE_KEY secret"
          exit 1
        fi
        echo "✅ App Store Connect API secrets are configured"
        
    - name: Create App Store Connect API Key file
      run: |
        mkdir -p ~/.appstoreconnect/private_keys/
        echo '${{ secrets.APPSTORE_PRIVATE_KEY }}' > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8
        chmod 600 ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8
        
    - name: Setup iOS Certificates (Automatic)
      run: |
        # Create a temporary keychain
        security create-keychain -p "temp123" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "temp123" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        echo "Setting up automatic code signing..."
        echo "Xcode will handle certificate and provisioning profile creation automatically"
        
    - name: Clean and prepare iOS build
      run: |
        # Clean any previous builds
        flutter clean
        flutter pub get
        
        # Clean iOS build artifacts
        cd ios
        rm -rf build/
        rm -rf Pods/
        rm -f Podfile.lock
        
        # Install CocoaPods dependencies
        pod install
        cd ..
        
        # Ensure Flutter frameworks are properly linked
        flutter precache --ios
        
    - name: Verify Flutter integration
      run: |
        echo "Checking Flutter iOS integration..."
        cd ios
        
        # Check if Flutter framework is properly linked
        ls -la Flutter/
        
        # Verify Pods integration
        if [ -d "Pods" ]; then
          echo "✅ CocoaPods installed successfully"
          find Pods -name "*Flutter*" -type d | head -5
        else
          echo "❌ CocoaPods not found"
        fi
        
        # Check workspace
        if [ -f "Runner.xcworkspace/contents.xcworkspacedata" ]; then
          echo "✅ Xcode workspace exists"
          cat Runner.xcworkspace/contents.xcworkspacedata
        else
          echo "❌ Xcode workspace not found"
        fi
        cd ..
        
    - name: Build iOS app
      run: |
        # Build with verbose output to debug any issues
        flutter build ios --release --no-codesign --verbose
        
    - name: Test API Connection
      run: |
        echo "Testing App Store Connect API..."
        xcrun altool --list-apps \
          --apiKey ${{ secrets.APPSTORE_KEY_ID }} \
          --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }} \
          --verbose
          
    - name: Build and Archive with Automatic Signing
      run: |
        echo "Building with automatic code signing..."
        xcodebuild -workspace ios/Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath build/Runner.xcarchive \
          -allowProvisioningUpdates \
          CODE_SIGN_STYLE=Automatic \
          DEVELOPMENT_TEAM=Z9WJ3V7JV3 \
          archive
          
    - name: Export IPA for App Store
      run: |
        xcodebuild -exportArchive \
          -archivePath build/Runner.xcarchive \
          -exportPath build \
          -exportOptionsPlist ios/ExportOptions.plist \
          -allowProvisioningUpdates
          
    - name: Upload to TestFlight
      run: |
        echo "Uploading to TestFlight..."
        xcrun altool --upload-app \
          --type ios \
          --file build/Runner.ipa \
          --apiKey ${{ secrets.APPSTORE_KEY_ID }} \
          --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }} \
          --verbose
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: build/Runner.ipa
        
    - name: Clean up
      if: always()
      run: |
        rm -f ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8
        security delete-keychain build.keychain || true
        
    - name: Build Summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Flutter build completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Used automatic code signing (no local certificates required)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ IPA exported successfully" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Uploaded to TestFlight" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Check TestFlight in App Store Connect for your build" >> $GITHUB_STEP_SUMMARY
        echo "2. The build will need to be processed by Apple (usually 10-30 minutes)" >> $GITHUB_STEP_SUMMARY
        echo "3. Once processed, you can distribute to internal testers" >> $GITHUB_STEP_SUMMARY
