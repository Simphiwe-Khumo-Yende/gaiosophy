name: Build and Deploy to TestFlight (Cloud Signing)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.32.0'

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run tests
      run: flutter test
      continue-on-error: true
      
    - name: Check for required secrets
      run: |
        if [ -z "${{ secrets.APPSTORE_ISSUER_ID }}" ]; then
          echo "Missing APPSTORE_ISSUER_ID secret"
          exit 1
        fi
        if [ -z "${{ secrets.APPSTORE_KEY_ID }}" ]; then
          echo "Missing APPSTORE_KEY_ID secret"
          exit 1
        fi
        if [ -z "${{ secrets.APPSTORE_PRIVATE_KEY }}" ]; then
          echo "Missing APPSTORE_PRIVATE_KEY secret"
          exit 1
        fi
        echo "âœ… App Store Connect API secrets are configured"
        
    - name: Create App Store Connect API Key
      env:
        APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
        APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
      run: |
        # Create the private key file
        mkdir -p ~/private_keys
        echo -n "$APP_STORE_CONNECT_API_KEY_KEY" > ~/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_KEY_ID}.p8
        
        # Create xcconfig file for API authentication
        cat > ~/api_key.xcconfig <<EOF
        APP_STORE_CONNECT_API_KEY_ISSUER_ID = ${APP_STORE_CONNECT_API_KEY_ISSUER_ID}
        APP_STORE_CONNECT_API_KEY_KEY_ID = ${APP_STORE_CONNECT_API_KEY_KEY_ID}
        APP_STORE_CONNECT_API_KEY_KEY_FILEPATH = $(pwd)/~/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_KEY_ID}.p8
        EOF
        
    - name: Create ExportOptions.plist
      run: |
        cat > ios/ExportOptions.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>method</key>
          <string>app-store-connect</string>
          <key>teamID</key>
          <string>Z9WJ3V7JV3</string>
          <key>uploadBitcode</key>
          <false/>
          <key>compileBitcode</key>
          <false/>
          <key>uploadSymbols</key>
          <true/>
          <key>signingStyle</key>
          <string>automatic</string>
          <key>generateAppStoreInformation</key>
          <true/>
          <key>stripSwiftSymbols</key>
          <true/>
          <key>manageAppVersionAndBuildNumber</key>
          <true/>
        </dict>
        </plist>
        EOF
        
    - name: Build Flutter iOS
      run: flutter build ios --release --no-codesign
      
    - name: Build and Archive with Cloud Signing
      env:
        APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
        APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
      run: |
        cd ios
        
        # Create a temporary keychain (required by Xcode)
        security create-keychain -p "" temporary
        security default-keychain -s temporary
        security unlock-keychain -p "" temporary
        security set-keychain-settings -lut 7200 temporary
        
        # Build archive with App Store Connect API authentication
        xcodebuild archive \
          -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -archivePath ../build/Runner.xcarchive \
          -destination "generic/platform=iOS" \
          -authenticationKeyPath ~/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_KEY_ID}.p8 \
          -authenticationKeyID ${APP_STORE_CONNECT_API_KEY_KEY_ID} \
          -authenticationKeyIssuerID ${APP_STORE_CONNECT_API_KEY_ISSUER_ID} \
          DEVELOPMENT_TEAM=Z9WJ3V7JV3 \
          -allowProvisioningUpdates
          
    - name: Export IPA
      env:
        APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
        APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      run: |
        xcodebuild -exportArchive \
          -archivePath build/Runner.xcarchive \
          -exportPath build \
          -exportOptionsPlist ios/ExportOptions.plist \
          -authenticationKeyPath ~/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_KEY_ID}.p8 \
          -authenticationKeyID ${APP_STORE_CONNECT_API_KEY_KEY_ID} \
          -authenticationKeyIssuerID ${APP_STORE_CONNECT_API_KEY_ISSUER_ID} \
          -allowProvisioningUpdates
          
    - name: Upload to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
        APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file build/Runner.ipa \
          --apiKey ${APP_STORE_CONNECT_API_KEY_KEY_ID} \
          --apiIssuer ${APP_STORE_CONNECT_API_KEY_ISSUER_ID}
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: |
          build/Runner.ipa
          build/Runner.xcarchive
          
    - name: Clean up
      if: always()
      run: |
        rm -rf ~/private_keys
        security delete-keychain temporary || true