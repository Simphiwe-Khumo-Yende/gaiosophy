name: Build and Deploy to TestFlight (Definitive Version)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.32.0'

jobs:
  build-and-deploy-ios:
    runs-on: macos-13

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Select stable Xcode version (15.2)
      run: sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get App Version from pubspec.yaml
      id: get_version
      run: |
        version_line=$(grep 'version:' pubspec.yaml | xargs)
        full_version=${version_line#*version: }
        version_name=${full_version%+*}
        build_number=${full_version#*+}
        echo "version_name=${version_name}" >> $GITHUB_OUTPUT
        echo "build_number=${build_number}" >> $GITHUB_OUTPUT

    # --- Secure Configuration & Authentication ---
    - name: Decode GoogleService-Info.plist
      run: echo "${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}" | base64 --decode > "${{ github.workspace }}/ios/Runner/GoogleService-Info.plist"

    - name: Create App Store Connect API Key file
      run: |
        mkdir -p ~/.appstoreconnect/private_keys/
        echo '${{ secrets.APPSTORE_PRIVATE_KEY }}' > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8

    - name: Verify App Store Connect API Authentication
      run: |
        echo "--- VERIFYING SECRETS ---"
        echo "Using Key ID: ${{ secrets.APPSTORE_KEY_ID }}"
        echo "Using Issuer ID: ${{ secrets.APPSTORE_ISSUER_ID }}"
        echo "--------------------------"
        echo "Attempting to authenticate with App Store Connect..."
        # Use a command that directly tests the API key, key ID, and issuer ID.
        xcrun altool --list-apps --apiKey ${{ secrets.APPSTORE_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }} --verbose
        echo "âœ… App Store Connect API key is valid and has permissions."

    # --- Build Preparation ---
    - name: Clean, Get Dependencies, and Install Pods
      run: |
        flutter clean
        flutter pub get
        cd ios
        pod install --repo-update
        cd ..

    - name: Create custom keychain
      run: |
        security create-keychain -p "github_actions_keychain" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "github_actions_keychain" build.keychain
        security set-keychain-settings -t 3600

    - name: Create ExportOptions.plist
      run: |
        cat > ios/ExportOptions.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>uploadSymbols</key>
            <true/>
            <key>signingStyle</key>
            <string>automatic</string>
        </dict>
        </plist>
        EOF

    # --- Build and Upload ---
    - name: Build and Sign IPA
      run: |
        flutter build ipa --release \
          --build-name=${{ steps.get_version.outputs.version_name }} \
          --build-number=${{ steps.get_version.outputs.build_number }} \
          --export-options-plist=ios/ExportOptions.plist

    - name: Upload to TestFlight
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file "build/ios/ipa/*.ipa" \
          --apiKey ${{ secrets.APPSTORE_KEY_ID }} \
          --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }} \
          --verbose
          
    - name: Clean up keychain and API key
      if: always()
      run: |
        security delete-keychain build.keychain || true
        rm -f ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8